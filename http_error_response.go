package blunder

import (
	"encoding/json"
	"net/http"
	"time"

	"github.com/google/uuid"
)

type HTTPErrorResponse struct {
	Errors []HTTPError `json:"errors"`

	//(number) The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
	Status int `json:"status,omitempty" example:"400"`

	//(strinrg) A URI reference that identifies the specificoccurrence of the problem.
	//It may or may not yield further information if dereferenced.
	Instance string `json:"instance,omitempty" example:"/login/log/abc123"`

	Language    string `json:"language,omitempty" example:"en"`
	Domain      string `json:"domain,omitempty" example:"global"`
	Timestamp   int    `json:"timestamp,omitempty" example:"1692604569"`
	Recoverable bool   `json:"recoverable,omitempty" example:"true"`

	TraceId       string `json:"trace_id,omitempty" example:"EJplcsCHuLu"`
	CorrelationId string `json:"correlation_id,omitempty" example:"asdas"`
}

func NewHTTPErrorResponse(status int, message string) HTTPErrorResponse {
	return HTTPErrorResponse{
		Errors: []HTTPError{
			{
				Title: message,
			},
		},
		Status: status,
	}
}

func FromHTTPError(status int, errs ...HTTPError) HTTPErrorResponse {
	return HTTPErrorResponse{
		Errors: errs,
		Status: status,
	}
}

func (r HTTPErrorResponse) ToJson() []byte {
	bytes, _ := json.Marshal(r)
	return bytes
}

func (r HTTPErrorResponse) WithLanguage(language string) HTTPErrorResponse {
	r.Language = language
	return r
}

func (r HTTPErrorResponse) WithInstance(instance string) HTTPErrorResponse {
	r.Instance = instance
	return r
}

func (r HTTPErrorResponse) WithTimestamp() HTTPErrorResponse {
	r.Timestamp = int(time.Now().Unix())
	return r
}

func (r HTTPErrorResponse) WithStatus(status int) HTTPErrorResponse {
	r.Status = status
	return r
}

func (r HTTPErrorResponse) WithDomain(domain string) HTTPErrorResponse {
	r.Domain = domain
	return r
}

func (r HTTPErrorResponse) WithTrace() HTTPErrorResponse {
	r.TraceId = uuid.NewString()
	return r
}

func (r HTTPErrorResponse) WithCorrelation(id string) HTTPErrorResponse {
	r.CorrelationId = id
	return r
}

func BadRequest() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusBadRequest, "The request failed because it contained an invalid value or missing required value. The value could be a parameter value, a header value, or a property value.")
}

func MethodNotAllowed() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusMethodNotAllowed, "The HTTP method associated with the request is not supported.")
}

func NotFound() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusNotFound, "The requested operation failed because a resource associated with the request could not be found.")
}

func Forbidden() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusForbidden, "The requested operation is forbidden and cannot be completed.")
}

func InternalServerError() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusInternalServerError, "The request failed due to an internal error.")
}

func NotImpemented() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusNotImplemented, "The requested operation has not been implemented.")
}

func ServiceUnavailable() HTTPErrorResponse {
	return NewHTTPErrorResponse(http.StatusServiceUnavailable, "Service Unavailable.")
}
